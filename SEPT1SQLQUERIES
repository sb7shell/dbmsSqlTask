CREATE TABLE Department(
DeptID INT PRIMARY KEY,
DeptName VARCHAR(20),
DeptCode varchar(3)
);
 
CREATE TABLE Employee (
EmpID VARCHAR(3) PRIMARY KEY,
EmpName VARCHAR(20),
Emailid VARCHAR(50) UNIQUE NOT NULL,
DeptID INT,
Designation VARCHAR(10),
FOREIGN KEY (DeptID) REFERENCES Department(DeptID)
);

INSERT INTO Department(DeptID,DeptName,DeptCode) VALUES (1,"CC DECARB","007"),
(2,"CC OIL","008"),
(3,"CC COAL","009"),
(4,"CC LUBES","010");

INSERT INTO Employee(DeptID,EmpName,EmailID,EmpID,Designation) VALUES (1,"SHUBNIT","SHUBNITK07@GMAIL.COM","007","DATA ANALYST"),
(2,"SAMNIT","SAMNITK07@GMAIL.COM","008","DATA ENGINEER"),
(3,"ROHAN","SIROHAN07@GMAIL.COM","009","DATA ENGINEER"),
(4,"RAHUL","RAHUL97@GMAIL.COM","010","DATA ANALYST");


CREATE TABLE STUDENTS (
SLNO INT PRIMARY KEY,
ID INT,
NAME VARCHAR(50) NOT NULL,
SUBJECT VARCHAR(20),
MARKS INT
);
INSERT INTO STUDENTS(SLNO, ID, NAME, SUBJECT, MARKS) VALUES (1,5030,"ASHLEY","DWH",50),
(2,5031,"PRIYA","DWH",61),
(3,5032,"JULIA","DWH",90),
(4,5033,"DON","DWH",50),
(5,5034,"BOB","DWH",65),
(6,5030,"ASHLEY","SQL",75),
(7,5031,"PRIYA","SQL",80),
(8,5032,"JULIA","SQL",40),
(9,5033,"DON","SQL",88),
(10,5034,"BOB","SQL",92),
(11,5030,"ASHLEY","AZURE",95),
(12,5031,"PRIYA","AZURE",45),
(13,5032,"JULIA","AZURE",85),
(14,5033,"DON","AZURE",57),
(15,5034,"BOB","AZURE",44)
;
SELECT DENSE_RANK OVER (PARTITION BY SUBJECT ORDER BY MARKS DESC) DRN,SUBJECT,MARKS,NAME FROM STUDENT

1ST SEPTEMBER: 
CREATE TABLE CUSTOMERS(
CID INT PRIMARY KEY,
FNAME VARCHAR(50),
LNAME VARCHAR(50),
EMAIL VARCHAR(100)
);
CREATE TABLE ORDERS(
OID INT PRIMARY KEY,
CID INT,
ODATE DATE,
TAMOUNT DECIMAL(10,2),
FOREIGN KEY(CID) REFERENCES CUSTOMERS(CID)
);
INSERT INTO CUSTOMERS (CID,FNAME,LNAME,EMAIL) VALUES 
(1,'SRISHTY','BEDI','SB07@GMAIL.COM'),
(2,'VANI','BEDI','VB07@GMAIL.COM');

INSERT INTO ORDERS (OID,CID,ODATE,TAMOUNT) VALUES
(1,1,'2023-08-01',100.00),
(2,2,'2023-08-15',170.00);
 


 
 

SELECT CUSTOMERS.*,ORDERS.*
FROM CUSTOMERS 
INNER JOIN ORDERS ON CUSTOMERS.CID = ORDERS.CID;

 
SELECT CUSTOMERS.*,ORDERS.*
FROM CUSTOMERS 
LEFT JOIN ORDERS ON CUSTOMERS.CID = ORDERS.CID;

 
SELECT CID FROM CUSTOMERS 
UNION 
SELECT CID FROM ORDERS;

 
SELECT CID FROM CUSTOMERS 
UNION ALL 
SELECT CID FROM ORDERS;
 

SELECT CID FROM CUSTOMERS 
INTERSECT 
SELECT CID FROM ORDERS;

 
SELECT * FROM ORDERS WHERE CID IN 
(SELECT CID FROM CUSTOMERS WHERE EMAIL = 'SB07@GMAIL.COM');

 
SELECT * FROM CUSTOMERS WHERE CID IN 
(SELECT CID FROM ORDERS);
 
EXERCISE: 
PROCEDURE
CREATE PROCEDURE GETORDERSBYEMAIL(
@EMAIL VARCHAR(100))
AS 
    SELECT ORDERS.*
    FROM CUSTOMERS
    INNER JOIN ORDERS ON CUSTOMERS.CID = ORDERS.CID
    WHERE CUSTOMERS.EMAIL = EMAIL;

 
EXEC GETORDERSBYEMAIL @EMAIL = 'SB07@GMAIL.COM';
 



NEW:
CREATE TABLE GALLERIES(
ID INT PRIMARY KEY,
CITY VARCHAR(50)
);
CREATE TABLE PAINTINGS(
ID INT PRIMARY KEY,
NAME VARCHAR(20),
GALLERY_ID INT,
PRICE INT
);
INSERT INTO GALLERIES(ID, CITY) VALUES (1,'JAIPUR'),(2,'KOLKATA'),(3,'MADHUBANI');
INSERT INTO PAINTINGS(ID,NAME,GALLERY_ID, PRICE) VALUES (1,'PATTERNS',3,5000),(2,'RINGER',1,4500),(3,'GIFT',1,4500),(4,'VIOLIN LESSONS',2,6700),(5,'CURIOSITY',2,9800);
 
CREATE TABLE SALES_AGENTS(
ID INT PRIMARY KEY,
LAST_NAME VARCHAR(50),
FIRST_NAME VARCHAR(50),
GALLERY_ID INT,
AGENCY_FEE INT,
FOREIGN KEY (GALLERY_ID) REFERENCES GALLERIES(ID)
);

CREATE TABLE MANAGERS(
ID INT PRIMARY KEY,
GALLERY_ID INT,
FOREIGN KEY (GALLERY_ID) REFERENCES GALLERIES(ID)
);

INSERT INTO SALES_AGENTS(ID,LAST_NAME,FIRST_NAME,GALLERY_ID,AGENCY_FEE) VALUES(1,'BROWN','DENIS',2,2250),(2,'WHITE','KATE',3,3120),(3,'BLACK','SARAH',2,1640),(4,'SMITH','HELEN',1,4500),(5,'STEAWRT','TOM',3,2130);
INSERT INTO MANAGERS(ID, GALLERY_ID) VALUES(1,2),(2,3),(4,1);

SELECT Name,Price,(SELECT AVG(PRICE) FROM Paintings)as avg_price from Paintings;
 

QUERY TO SELECT PRICE IS GREATER THAN AVG PRICE: 

MULTIPLE ROW SUBQUERY:
CALCULATE AVG AGENCY FEE WHERE MANAGER (ONLY THOSE AGENT WHO ARE NOT PART OF MANAGER TABLE)
SELECT AVG(AGENCY_FEE) FROM SALES_AGENTS 
WHERE ID 
NOT IN
(SELECT ID FROM MANAGERS);
 

MULTIPLE COLUMN SUBQUERIES: 
SELECT ID,NAME,PRICE FROM PAINTINGS TABLE WHERE NAME AND PRICE ARE THE MINIUM PRICE: 
SELECT ID,NAME,PRICE FROM PAINTINGS WHERE (NAME,PRICE) IN ( SELECT NAME,MIN(PRICE) FROM PAINTINGS);
(THE ABOVE QUERY WORKS IN OTHER SERVERS)
(FOR AZURE SQL QUERY TO BE WRITTEN IS: )
SELECT ID,NAME,PRICE FROM PAINTINGS WHERE CONCAT(NAME,PRICE) IN ( SELECT CONCAT(NAME,MIN(PRICE)) FROM PAINTINGS GROUP BY NAME);

 
CO-RELATED SUBQUERIES: 
SUBQUERIES THAT RETURN MULTIPLE COLUMNS AS OUTPUT DEPENDING UPON THE INFO OBTAINED FROM THE PARENT QUERY


QUERY WHERE WE HAVE A COUNT OF PAINTING AND CITY NAMES:
SELECT Galleries.City,COUNT(Galleries.city) FROM Galleries,Paintings WHERE Galleries.ID=Paintings.gallery_id GROUP BY Galleries.CITY;
 
OR 

SELECT CITY,(SELECT COUNT(*) FROM PAINTINGS P WHERE G.ID = P.GALLERY_ID) COUNT_PAINTINGS FROM GALLERIES G;


FIND OUT THE INFO OF THOSE SALES AGENT WHOSE AGENCY FEES IS GERATER THAN OR EQUAL TO THE AGENCY FEES OF THERE GALLERY

SELECT FIRST_NAME, LAST_NAME,AGENCY_FEE FROM SALES_AGENTS SA1 WHERE SA1.AGENCY_FEE >= (SELECT AVG(AGENCY_FEE) FROM SALES_AGENTS SA2 WHERE SA2.GALLERY_ID = SA1.GALLERY_ID);
 

Views:
CREATE VIEW VW_PAINTINGPRICE AS 
SELECT NAME AS PAINTING,PRICE,(SELECT AVG(PRICE) FROM PAINTINGS WHERE PRICE IN
(SELECT PRICE FROM PAINTINGS WHERE PRICE>=5000)) AS AVG_PRICE FROM PAINTINGS;

SELECT * FROM VW_PAINTINGPRICE; 

 


Upload this file having set of insert statements to your azure sql db after create table: 
create table Sales_Order_data(
  channel varchar(50) NOT NULL,
  sales_order_line_key numeric NOT NULL,
  sales_order varchar(50) NOT NULL,
  sales_order_line varchar(50) NOT NULL
  );
And then upload the text script having all the insert queries and run:
 
CREATE CLUSTERED INDEX IDX_SALESORDERLINEKEY ON SALES_ORDER_DATA (SALESORDERLINEKEY)

SELECT * FROM [DBO].[SALES_ORDER_DATA] WHERE SALES_ORDER = ‘43659001’


INDEXES:
(FROM PDF)
CREATE TABLE PRODUCTS(
PID INT,
PNAME VARCHAR(100),
CATEGORY VARCHAR(50),
PRICE DECIMAL(10,2),
STOCKQUANTITY INT
);
INSERT INTO PRODUCTS(PID, PNAME, CATEGORY, PRICE, STOCKQUANTITY)
VALUES
(1,'PRODUCT A','ELECTRONICS',499.99,100),
(2,'PRODUCT B','CLOTHING',39.99,250),
(3,'PRODUCT C','ELECTRONICS',899.99,50)
 SELECT * FROM PRODUCTS;
/* CLUSTERED INDEX*/
CREATE CLUSTERED INDEX IX_PRODUCTID ON PRODUCTS(PID);
/* NON CLUSTERED INDEX*/
CREATE NONCLUSTERED INDEX IX_PRODUCTID ON PRODUCTS(CATEGORY);
/* COLUMNSTORE INDEX*/
CREATE NONCLUSTERED COLUMNSTORE INDEX CS_PRICE ON PRODUCTS (PRICE);

/*COMPARE QUERY PERFORMANCE*/
SELECT * FROM PRODUCTS WHERE PNAME='PRODUCT A';
SELECT * FROM PRODUCTS WHERE PID = 2;
SELECT * FROM PRODUCTS WHERE CATEGORY = 'ELECTRONICS';
SELECT PNAME FROM PRODUCTS WHERE PRICE > 100;
